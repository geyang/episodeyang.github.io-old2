{"version":3,"sources":["webpack:///./src/pages/images/profile-image.js","webpack:///./src/components/publication-list.js","webpack:///./src/pages/index.js","webpack:///./.cache/public-page-renderer.js","webpack:///./.cache/gatsby-browser-entry.js","webpack:///./.cache/public-page-renderer-prod.js","webpack:///./src/components/header.js","webpack:///./src/components/layout.js","webpack:///./src/components/seo.js"],"names":["StyledImage","styled","Img","_templateObject","props","align","width","maxWidth","height","maxHeight","margin","ProfileImage","_ref","Object","assign","data","_public_static_d_1220001450_json__WEBPACK_IMPORTED_MODULE_1__","react__WEBPACK_IMPORTED_MODULE_2___default","a","createElement","fluid","placeholderImage","childImageSharp","publications","title","authors","intro","image","PubList","react_default","Fragment","href","map","pub","require","IndexPage","layout","seo","profile_image","m","module","exports","default","react__WEBPACK_IMPORTED_MODULE_0__","__webpack_require__","react__WEBPACK_IMPORTED_MODULE_0___default","n","gatsby_link__WEBPACK_IMPORTED_MODULE_1__","gatsby_link__WEBPACK_IMPORTED_MODULE_1___default","d","__webpack_exports__","loader","enqueue","React","createContext","ProdPageRenderer","location","pageResources","InternalPageRenderer","_objectSpread","json","Header","siteTitle","className","defaultProps","Layout","children","_856328897","header","site","siteMetadata","Date","getFullYear","SEO","description","lang","meta","_public_static_d_2417117884_json__WEBPACK_IMPORTED_MODULE_0__","metaDescription","react__WEBPACK_IMPORTED_MODULE_1___default","react_helmet__WEBPACK_IMPORTED_MODULE_2___default","htmlAttributes","titleTemplate","name","content","property","author","concat"],"mappings":"8VAgBA,IAAMA,EAAcC,YAAOC,IAAPD,CAAHE,IACb,SAAAC,GAAK,OAAIA,EAAMC,MAAQ,UAAYD,EAAMC,MAAQ,IACjD,SAAAD,GAAK,OAAIA,EAAME,MAAQ,UAAYF,EAAME,MAAQ,IACjD,SAAAF,GAAK,OAAIA,EAAMG,SAAW,cAAgBH,EAAMG,SAAW,IAC3D,SAAAH,GAAK,OAAIA,EAAMI,OAAS,WAAaJ,EAAMI,OAAS,IACpD,SAAAJ,GAAK,OAAIA,EAAMK,UAAY,eAAiBL,EAAMK,UAAY,IAC9D,SAAAL,GAAK,OAAIA,EAAMM,OAAS,WAAaN,EAAMM,OAAS,KAGzC,SAASC,EAATC,GAAoC,IAATR,EAASS,OAAAC,OAAA,GAAAF,GAC3CG,EAAIC,EAAAD,KAYV,OAAOE,EAAAC,EAAAC,cAACnB,EAADa,OAAAC,OAAA,CAAaM,MAAOL,EAAKM,iBAAiBC,gBAAgBF,OAAWhB,sGCpCxEmB,EAAe,CACnB,CACEC,MAAO,GACPC,QAAS,GACTC,MAAO,GACPC,MAAO,KAGI,SAASC,IACtB,OAAOC,EAAAX,EAAAC,cAAAU,EAAAX,EAAAY,SAAA,KACLD,EAAAX,EAAAC,cAAA,0BACAU,EAAAX,EAAAC,cAAA,+PAMAU,EAAAX,EAAAC,cAAA,uGAGEU,EAAAX,EAAAC,cAAA,KAAGY,KAAK,0DAAR,QAHF,KAKCR,EAAaS,IAAI,SAACC,GAAD,OAChBJ,EAAAX,EAAAC,cAAA,WACGc,EAAIT,MACJS,EAAIR,QACJQ,EAAIP,MACJO,EAAIN,UCrBbO,EAAQ,KA0BOC,UAxBG,kBAChBN,EAAAX,EAAAC,cAACiB,EAAA,EAAD,KACEP,EAAAX,EAAAC,cAACkB,EAAA,EAAD,CAAKb,MAAM,8BACXK,EAAAX,EAAAC,cAACmB,EAAA,QAAD,CAAchC,MAAM,MAAMC,SAAS,QACrBF,MAAM,QAAQK,OAAO,sBACnCmB,EAAAX,EAAAC,cAAA,qBACAU,EAAAX,EAAAC,cAAA,yEACAU,EAAAX,EAAAC,cAAA,6CAAoCU,EAAAX,EAAAC,cAAA,KAAGY,KAAK,8BAAR,6CAApC,SAEEF,EAAAX,EAAAC,cAAA,KAAGY,KAAK,8CAAR,iBAFF,aAGUF,EAAAX,EAAAC,cAAA,KAAGY,KAAK,0EAAR,gBAHV,wCAMEF,EAAAX,EAAAC,cAAA,KAAGY,KAAK,0CAAR,oBANF,KAQAF,EAAAX,EAAAC,cAAA,gEACEU,EAAAX,EAAAC,cAAA,KAAGY,KAAK,4DAAR,aADF,KAKAF,EAAAX,EAAAC,cAACS,EAAD,6BC9BJ,IAAsBW,EAKpBC,EAAOC,SALaF,EAKWL,EAAQ,OALRK,EAAEG,SAAYH,oCCA/C,IAAAI,EAAAC,EAAA,GAAAC,EAAAD,EAAAE,EAAAH,GAAAI,EAAAH,EAAA,IAAAI,EAAAJ,EAAAE,EAAAC,GAAAH,EAAAK,EAAAC,EAAA,sBAAAF,EAAA9B,IAAA0B,EAAA,KAAAA,EAAA,IAcyBO,QAAOC,QAELC,IAAMC,cAAc,2gBCMhCC,UAjBU,SAAA3C,GAAiC,IAA9B4C,EAA8B5C,EAA9B4C,SAAUC,EAAoB7C,EAApB6C,cACpC,OAAKA,EAGEJ,IAAMlC,cAAcuC,+UAApBC,CAAA,CACLH,WACAC,iBACGA,EAAcG,OALV,qECFLC,UAAS,SAAAjD,KAAGkD,UAAH,OACbjC,EAAAX,EAAAC,cAAA,cACEU,EAAAX,EAAAC,cAAA,OAAK4C,UAAU,SACblC,EAAAX,EAAAC,cAAA,KAAGY,KAAK,uEAAR,kBAEAF,EAAAX,EAAAC,cAAA,KAAGY,KAAK,kCAAR,UACAF,EAAAX,EAAAC,cAAA,KAAGY,KAAK,mCAAR,eAwBN8B,EAAOG,aAAe,CACpBF,UAAS,IAGID,eCIAI,IA7BA,SAAArD,GAAkB,IAAfsD,EAAetD,EAAfsD,SACVnD,EAAIoD,EAAApD,KAUV,OACEc,EAAAX,EAAAC,cAAAU,EAAAX,EAAAY,SAAA,KACED,EAAAX,EAAAC,cAACiD,EAAD,CAAQN,UAAW/C,EAAKsD,KAAKC,aAAa9C,QAC1CK,EAAAX,EAAAC,cAAA,WAAS4C,UAAU,SAChBG,EACDrC,EAAAX,EAAAC,cAAA,mBACIU,EAAAX,EAAAC,cAAA,KAAGY,KAAK,+BAAR,WADJ,0BAEuB,IAAIwC,MAAOC,mGCpB1C,SAASC,EAAT7D,GAAiD,IAAlC8D,EAAkC9D,EAAlC8D,YAAaC,EAAqB/D,EAArB+D,KAAMC,EAAehE,EAAfgE,KAAMpD,EAASZ,EAATY,MAC9B6C,EADuCQ,EAAA9D,KACvCsD,KAcFS,EAAkBJ,GAAeL,EAAKC,aAAaI,YAEzD,OACEK,EAAA7D,EAAAC,cAAC6D,EAAA9D,EAAD,CACE+D,eAAgB,CACdN,QAEFnD,MAAOA,EACP0D,cAAa,QAAUb,EAAKC,aAAa9C,MACzCoD,KAAM,CACJ,CACEO,KAAI,cACJC,QAASN,GAEX,CACEO,SAAQ,WACRD,QAAS5D,GAEX,CACE6D,SAAQ,iBACRD,QAASN,GAEX,CACEO,SAAQ,UACRD,QAAO,WAET,CACED,KAAI,eACJC,QAAO,WAET,CACED,KAAI,kBACJC,QAASf,EAAKC,aAAagB,QAE7B,CACEH,KAAI,gBACJC,QAAS5D,GAEX,CACE2D,KAAI,sBACJC,QAASN,IAEXS,OAAOX,KAKfH,EAAIT,aAAe,CACjBW,KAAI,KACJC,KAAM,GACNF,YAAW,IAUED","file":"component---src-pages-index-js-f3bbc8aeba679a9f56bc.js","sourcesContent":["import React from \"react\"\nimport { useStaticQuery, graphql } from \"gatsby\"\nimport Img from \"gatsby-image\"\nimport styled from \"styled-components\"\n\n/*\n * This component is built using `gatsby-image` to automatically serve optimized\n * images with lazy loading and reduced file sizes. The image is loaded using a\n * `useStaticQuery`, which allows us to load the image from directly within this\n * component, rather than having to pass the image data down from pages.\n *\n * For more information, see the docs:\n * - `gatsby-image`: https://gatsby.dev/gatsby-image\n * - `useStaticQuery`: https://www.gatsbyjs.org/docs/use-static-query/\n */\n\nconst StyledImage = styled(Img)`\n  ${props => props.align ? \"float: \" + props.align : \"\"}\n  ${props => props.width ? \"width: \" + props.width : \"\"}\n  ${props => props.maxWidth ? \"max-width: \" + props.maxWidth : \"\"}\n  ${props => props.height ? \"height: \" + props.height : \"\"}\n  ${props => props.maxHeight ? \"max-height: \" + props.maxHeight : \"\"}\n  ${props => props.margin ? \"margin: \" + props.margin : \"\"}\n`\n\nexport default function ProfileImage({ ...props }) {\n  const data = useStaticQuery(graphql`\n    query {\n      placeholderImage: file(relativePath: { eq: \"pages/images/ge_at_facebook.jpg\" }) {\n        childImageSharp {\n          fluid(maxWidth: 600) {\n            ...GatsbyImageSharpFluid\n          }\n        }\n      }\n    }\n  `)\n\n  return <StyledImage fluid={data.placeholderImage.childImageSharp.fluid} {...props}/>\n}\n\n","import React from \"react\"\n\nconst publications = [\n  {\n    title: \"\",\n    authors: \"\",\n    intro: \"\",\n    image: \"\",\n  },\n]\nexport default function PubList() {\n  return <>\n    <h2>Publications</h2>\n    <p>\n      My current research focus lie at the intersection between unsupervised\n      representation learning, reinforcement learning, meta-learning and\n      robotics. Specifically I am working on unsupervised representation\n      learning via RL, and unsupervised RL.\n    </p>\n    <p>\n      In my past life I did atomic physics and quantum computing. You can\n      see more of these work&nbsp;\n      <a href=\"https://scholar.google.com/citations?user=vaQcF6kAAAAJ\">here</a>.\n    </p>\n    {publications.map((pub) =>\n      <div>\n        {pub.title}\n        {pub.authors}\n        {pub.intro}\n        {pub.image}\n      </div>,\n    )}\n  </>\n}","import React from \"react\"\nimport { Link } from \"gatsby\"\n\nimport Layout from \"../components/layout\"\nimport SEO from \"../components/seo\"\nimport ProfileImage from \"./images/profile-image\"\nimport PubList from \"../components/publication-list\"\n\nrequire(`katex/dist/katex.min.css`)\n\nconst IndexPage = () => (\n  <Layout>\n    <SEO title=\"Ge Yang | episodeyang.com\"/>\n    <ProfileImage width=\"40%\" maxWidth=\"250px\"\n                  align=\"right\" margin=\"0 -40px 10px 20px\"/>\n    <h1>Ge Yang</h1>\n    <p>I am doing my Ph.D. in Physics at the University of Chicago.</p>\n    <p>For the past year, I interned at <a href=\"https://bair.berkeley.edu/\">\n      Berkeley Artificial Intelligence Research</a> with&nbsp;\n      <a href=\"https://people.eecs.berkeley.edu/~pabbeel/\">Pieter Abbeel</a>,\n      and the <a href=\"https://ai.facebook.com/blog/advancing-ai-by-teaching-robots-to-learn/\">\n        robotics lab\n      </a> at Facebook AI Research (FAIR) with&nbsp;\n      <a href=\"https://www.robertocalandra.com/about/\">Roberto Calandra</a>.\n    </p>\n    <p>At the moment I'm interning at Google DeepMind with&nbsp;\n      <a href=\"https://scholar.google.co.uk/citations?user=rLdfJ1gAAAAJ\">\n        Vlad Mnih\n      </a>.</p>\n    {/*<Link to=\"/page-2/\">Go to page 2</Link>*/}\n    <PubList/>\n  </Layout>\n)\n\nexport default IndexPage\n","const preferDefault = m => (m && m.default) || m\n\nif (process.env.BUILD_STAGE === `develop`) {\n  module.exports = preferDefault(require(`./public-page-renderer-dev`))\n} else if (process.env.BUILD_STAGE === `build-javascript`) {\n  module.exports = preferDefault(require(`./public-page-renderer-prod`))\n} else {\n  module.exports = () => null\n}\n","import React from \"react\"\nimport PropTypes from \"prop-types\"\nimport Link, {\n  withPrefix,\n  withAssetPrefix,\n  navigate,\n  push,\n  replace,\n  navigateTo,\n  parsePath,\n} from \"gatsby-link\"\nimport PageRenderer from \"./public-page-renderer\"\nimport loader from \"./loader\"\n\nconst prefetchPathname = loader.enqueue\n\nconst StaticQueryContext = React.createContext({})\n\nfunction StaticQueryDataRenderer({ staticQueryData, data, query, render }) {\n  const finalData = data\n    ? data.data\n    : staticQueryData[query] && staticQueryData[query].data\n\n  return (\n    <React.Fragment>\n      {finalData && render(finalData)}\n      {!finalData && <div>Loading (StaticQuery)</div>}\n    </React.Fragment>\n  )\n}\n\nconst StaticQuery = props => {\n  const { data, query, render, children } = props\n\n  return (\n    <StaticQueryContext.Consumer>\n      {staticQueryData => (\n        <StaticQueryDataRenderer\n          data={data}\n          query={query}\n          render={render || children}\n          staticQueryData={staticQueryData}\n        />\n      )}\n    </StaticQueryContext.Consumer>\n  )\n}\n\nconst useStaticQuery = query => {\n  if (\n    typeof React.useContext !== `function` &&\n    process.env.NODE_ENV === `development`\n  ) {\n    throw new Error(\n      `You're likely using a version of React that doesn't support Hooks\\n` +\n        `Please update React and ReactDOM to 16.8.0 or later to use the useStaticQuery hook.`\n    )\n  }\n  const context = React.useContext(StaticQueryContext)\n  if (context[query] && context[query].data) {\n    return context[query].data\n  } else {\n    throw new Error(\n      `The result of this StaticQuery could not be fetched.\\n\\n` +\n        `This is likely a bug in Gatsby and if refreshing the page does not fix it, ` +\n        `please open an issue in https://github.com/gatsbyjs/gatsby/issues`\n    )\n  }\n}\n\nStaticQuery.propTypes = {\n  data: PropTypes.object,\n  query: PropTypes.string.isRequired,\n  render: PropTypes.func,\n  children: PropTypes.func,\n}\n\nfunction graphql() {\n  throw new Error(\n    `It appears like Gatsby is misconfigured. Gatsby related \\`graphql\\` calls ` +\n      `are supposed to only be evaluated at compile time, and then compiled away. ` +\n      `Unfortunately, something went wrong and the query was left in the compiled code.\\n\\n` +\n      `Unless your site has a complex or custom babel/Gatsby configuration this is likely a bug in Gatsby.`\n  )\n}\n\nexport {\n  Link,\n  withAssetPrefix,\n  withPrefix,\n  graphql,\n  parsePath,\n  navigate,\n  push, // TODO replace for v3\n  replace, // TODO remove replace for v3\n  navigateTo, // TODO: remove navigateTo for v3\n  StaticQueryContext,\n  StaticQuery,\n  PageRenderer,\n  useStaticQuery,\n  prefetchPathname,\n}\n","import React from \"react\"\nimport PropTypes from \"prop-types\"\n\nimport InternalPageRenderer from \"./page-renderer\"\n\nconst ProdPageRenderer = ({ location, pageResources }) => {\n  if (!pageResources) {\n    return null\n  }\n  return React.createElement(InternalPageRenderer, {\n    location,\n    pageResources,\n    ...pageResources.json,\n  })\n}\n\nProdPageRenderer.propTypes = {\n  location: PropTypes.shape({\n    pathname: PropTypes.string.isRequired,\n  }).isRequired,\n}\n\nexport default ProdPageRenderer\n","import { Link } from \"gatsby\"\nimport PropTypes from \"prop-types\"\nimport React from \"react\"\nimport Layout from \"./layout\"\n\nconst Header = ({ siteTitle }) => (\n  <header>\n    <nav className=\"group\">\n      <a href=\"https://scholar.google.com/citations?user=vaQcF6kAAAAJ&hl=en&oi=sra\">Google\n        Scholar</a>\n      <a href=\"https://github.com/episodeyang\">GitHub</a>\n      <a href=\"https://twitter.com/episodeyang\">Twitter</a>\n    </nav>\n  </header>\n  // <header>\n  // <div style={{\n  //     margin: `0 auto`,\n  //     maxWidth: 960,\n  //     padding: `1.45rem 1.0875rem`,\n  //   }}>\n  //     <h1 style={{ margin: 0 }}>\n  //       <Link to=\"/\"\n  //             style={{\n  //               color: `white`,\n  //               textDecoration: `none`,\n  //             }}>{siteTitle}</Link>\n  //     </h1>\n  //   </div>\n  // </header>\n)\n\nHeader.propTypes = {\n  siteTitle: PropTypes.string,\n}\n\nHeader.defaultProps = {\n  siteTitle: ``,\n}\n\nexport default Header\n","/**\n * Layout component that queries for data\n * with Gatsby's useStaticQuery component\n *\n * See: https://www.gatsbyjs.org/docs/use-static-query/\n */\n\nimport React from \"react\"\nimport PropTypes from \"prop-types\"\nimport { useStaticQuery, graphql } from \"gatsby\"\n\nimport Header from \"./header\"\nimport \"../tufte/tufte.scss\"\n\nconst Layout = ({ children }) => {\n  const data = useStaticQuery(graphql`\n    query SiteTitleQuery {\n      site {\n        siteMetadata {\n          title\n        }\n      }\n    }\n  `)\n\n  return (\n    <>\n      <Header siteTitle={data.site.siteMetadata.title}/>\n      <article className=\"group\">\n        {children}\n        <footer>\n          © <a href=\"https://www.episodeyang.com\">Ge Yang</a>,\n          all rights reserved {new Date().getFullYear()}\n        </footer>\n      </article>\n    </>\n  )\n}\n\nLayout.propTypes = {\n  children: PropTypes.node.isRequired,\n}\n\nexport default Layout\n","/**\n * SEO component that queries for data with\n *  Gatsby's useStaticQuery React hook\n *\n * See: https://www.gatsbyjs.org/docs/use-static-query/\n */\n\nimport React from \"react\"\nimport PropTypes from \"prop-types\"\nimport Helmet from \"react-helmet\"\nimport { useStaticQuery, graphql } from \"gatsby\"\n\nfunction SEO({ description, lang, meta, title }) {\n  const { site } = useStaticQuery(\n    graphql`\n      query {\n        site {\n          siteMetadata {\n            title\n            description\n            author\n          }\n        }\n      }\n    `\n  )\n\n  const metaDescription = description || site.siteMetadata.description\n\n  return (\n    <Helmet\n      htmlAttributes={{\n        lang,\n      }}\n      title={title}\n      titleTemplate={`%s | ${site.siteMetadata.title}`}\n      meta={[\n        {\n          name: `description`,\n          content: metaDescription,\n        },\n        {\n          property: `og:title`,\n          content: title,\n        },\n        {\n          property: `og:description`,\n          content: metaDescription,\n        },\n        {\n          property: `og:type`,\n          content: `website`,\n        },\n        {\n          name: `twitter:card`,\n          content: `summary`,\n        },\n        {\n          name: `twitter:creator`,\n          content: site.siteMetadata.author,\n        },\n        {\n          name: `twitter:title`,\n          content: title,\n        },\n        {\n          name: `twitter:description`,\n          content: metaDescription,\n        },\n      ].concat(meta)}\n    />\n  )\n}\n\nSEO.defaultProps = {\n  lang: `en`,\n  meta: [],\n  description: ``,\n}\n\nSEO.propTypes = {\n  description: PropTypes.string,\n  lang: PropTypes.string,\n  meta: PropTypes.arrayOf(PropTypes.object),\n  title: PropTypes.string.isRequired,\n}\n\nexport default SEO\n"],"sourceRoot":""}